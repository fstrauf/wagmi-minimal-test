// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  Payout        Payout[]
  Vote          Vote[]
  ContentAuthor ContentAuthor[]
  wallet        String?         @unique
}

model RewardRound {
  id            String    @id @default(cuid())
  monthYear     String?   @unique
  budget        Int?
  contentPoints Int?
  Vote          Vote[]
  Payout        Payout[]
  isOpen        Boolean   @default(false)
  Content       Content[]
}

model Payout {
  id             String      @id @default(cuid())
  userId         String      @map("user_id")
  user           User        @relation(fields: [userId], references: [id])
  rewardRoundId  String
  rewardRound    RewardRound @relation(fields: [rewardRoundId], references: [id])
  pointsReceived Int?
  cashReward     Float?
}

model Content {
  id              String          @id @default(cuid())
  description     String?
  url             String?
  pointsVote      Int?
  createdAt       String?
  createdOn       DateTime?
  contentAuthorId String?
  // ContentAuthor ContentAuthor @relation(fields: [contentAuthorId], references: [id])
  Vote            Vote[]
  ContentAuthor   ContentAuthor[]
  rewardRoundId   String?         @default(cuid())
  rewardRound     RewardRound?    @relation(fields: [rewardRoundId], references: [id])
}

model Vote {
  id            String      @id @default(cuid())
  rewardRoundId String
  rewardRound   RewardRound @relation(fields: [rewardRoundId], references: [id])
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  pointsSpent   Int?
  contentId     String
  content       Content     @relation(fields: [contentId], references: [id])
}

model ContentAuthor {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  contentId String
  content   Content @relation(fields: [contentId], references: [id])
}
